#include <iostream>
#include <string>
#include <cstdlib>
#include <mysql/mysql.h>
using namespace std;

// Database connection constants
const string DB_HOST = "localhost";
const string DB_USER = "allindragons";
const string DB_PASS = "snogardnilla_002";
const string DB_NAME = "cs370_section2_allindragons";

// Session state constants: 0=NONE, 1=LOGGED_IN, 2=EXPIRED
const int SESSION_NONE = 0;
const int SESSION_LOGGED_IN = 1;
const int SESSION_EXPIRED = 2;

// Session timeout: 5 minutes = 300 seconds
const int SESSION_TIMEOUT = 300;

// Helper function: Get value of a cookie by name
// Parses HTTP_COOKIE environment variable
string getCookie(const string& name) {
    const char* cookies = getenv("HTTP_COOKIE");
    if (!cookies) return "";
    
    string cookieStr = cookies;
    string searchStr = name + "=";
    size_t pos = cookieStr.find(searchStr);
    
    if (pos == string::npos) return "";
    
    pos += searchStr.length();
    size_t endPos = cookieStr.find(";", pos);
    
    if (endPos == string::npos) {
        return cookieStr.substr(pos);
    }
    return cookieStr.substr(pos, endPos - pos);
}

// Helper function: Escape SQL special characters to prevent injection
string escapeSQL(MYSQL* conn, const string& input) {
    char* escaped = new char[input.length() * 2 + 1];
    mysql_real_escape_string(conn, escaped, input.c_str(), input.length());
    string result = escaped;
    delete[] escaped;
    return result;
}

// Helper function: URL decode a string (handles %20, +, etc.)
string urlDecode(const string& str) {
    string result;
    for (size_t i = 0; i < str.length(); i++) {
        if (str[i] == '+') {
            result += ' ';
        } else if (str[i] == '%' && i + 2 < str.length()) {
            int value;
            sscanf(str.substr(i + 1, 2).c_str(), "%x", &value);
            result += static_cast<char>(value);
            i += 2;
        } else {
            result += str[i];
        }
    }
    return result;
}

// Helper function: Get POST parameter value by name
string getValue(const string& data, const string& key) {
    size_t pos = data.find(key + "=");
    if (pos == string::npos) return "";
    
    pos += key.length() + 1;
    size_t endPos = data.find("&", pos);
    
    if (endPos == string::npos) {
        return urlDecode(data.substr(pos));
    }
    return urlDecode(data.substr(pos, endPos - pos));
}

// Session helper: Create new session in database for user
// Returns session_id (UUID generated by MySQL)
string createSession(MYSQL* conn, int userId) {
    // Insert new session with MySQL-generated UUID
    string query = "INSERT INTO sessions (session_id, user_id, last_activity) VALUES (UUID(), " + to_string(userId) + ", NOW())";
    
    if (mysql_query(conn, query.c_str())) {
        return ""; // Failed to create session
    }
    
    // Retrieve the session_id we just created
    query = "SELECT session_id FROM sessions WHERE user_id = " + to_string(userId) + " ORDER BY created_at DESC LIMIT 1";
    
    if (mysql_query(conn, query.c_str())) {
        return ""; // Failed to retrieve session_id
    }
    
    MYSQL_RES* result = mysql_store_result(conn);
    if (!result) return "";
    
    MYSQL_ROW row = mysql_fetch_row(result);
    string sessionId = "";
    if (row && row[0]) {
        sessionId = row[0];
    }
    
    mysql_free_result(result);
    return sessionId;
}

// Session helper: Check session state and get userId
// Returns SESSION_NONE, SESSION_LOGGED_IN, or SESSION_EXPIRED
// Sets outUserId if session is valid (LOGGED_IN)
int getSessionState(MYSQL* conn, int& outUserId) {
    string sessionId = getCookie("session");
    
    // No cookie means never logged in
    if (sessionId.empty()) {
        outUserId = 0;
        return SESSION_NONE;
    }
    
    // Look up session in database
    string escapedSid = escapeSQL(conn, sessionId);
    string query = "SELECT user_id, UNIX_TIMESTAMP(last_activity) FROM sessions WHERE session_id = '" + escapedSid + "'";
    
    if (mysql_query(conn, query.c_str())) {
        outUserId = 0;
        return SESSION_NONE;
    }
    
    MYSQL_RES* result = mysql_store_result(conn);
    if (!result) {
        outUserId = 0;
        return SESSION_NONE;
    }
    
    MYSQL_ROW row = mysql_fetch_row(result);
    
    if (!row) {
        // Session ID not found in database
        mysql_free_result(result);
        outUserId = 0;
        return SESSION_NONE;
    }
    
    int userId = atoi(row[0]);
    long lastActivity = atol(row[1]);
    mysql_free_result(result);
    
    // Check if session expired (more than 5 minutes since last activity)
    long currentTime = time(NULL);
    if (currentTime - lastActivity > SESSION_TIMEOUT) {
        outUserId = 0;
        return SESSION_EXPIRED;
    }
    
    // Session is valid
    outUserId = userId;
    return SESSION_LOGGED_IN;
}

// Session helper: Renew session activity timestamp
// Updates last_activity to NOW() to keep session alive
void renewSessionActivity(MYSQL* conn, const string& sessionId) {
    string escapedSid = escapeSQL(conn, sessionId);
    string query = "UPDATE sessions SET last_activity = NOW() WHERE session_id = '" + escapedSid + "'";
    mysql_query(conn, query.c_str());
}

// Session helper: Delete session from database
void destroySession(MYSQL* conn, const string& sessionId) {
    string escapedSid = escapeSQL(conn, sessionId);
    string query = "DELETE FROM sessions WHERE session_id = '" + escapedSid + "'";
    mysql_query(conn, query.c_str());
}

// Session helper: Set session cookie (HttpOnly, before Content-type)
void setSessionCookie(const string& sessionId) {
    cout << "Set-Cookie: session=" << sessionId << "; HttpOnly\r\n";
}

// Session helper: Clear session cookie (set expired date)
void clearSessionCookie() {
    cout << "Set-Cookie: session=; HttpOnly; expires=Thu, 01 Jan 1970 00:00:00 GMT\r\n";
}

int main() {
    // Get request method and query string
    const char* requestMethod = getenv("REQUEST_METHOD");
    const char* queryString = getenv("QUERY_STRING");
    
    // Initialize MySQL connection
    MYSQL* conn = mysql_init(NULL);
    if (!mysql_real_connect(conn, DB_HOST.c_str(), DB_USER.c_str(), 
                           DB_PASS.c_str(), DB_NAME.c_str(), 0, NULL, 0)) {
        cout << "Content-type: text/html\r\n\r\n";
        cout << "<html><body><h1>Database Connection Error</h1></body></html>\n";
        return 1;
    }
    
    // Check session state at start of request
    int userId = 0;
    int sessionState = getSessionState(conn, userId);
    
    // If logged in, renew activity timestamp
    if (sessionState == SESSION_LOGGED_IN) {
        string sessionId = getCookie("session");
        renewSessionActivity(conn, sessionId);
    }
    
    // If expired session, clear the cookie
    if (sessionState == SESSION_EXPIRED) {
        clearSessionCookie();
    }
    
    // Handle logout action
    if (queryString && string(queryString).find("action=logout") != string::npos) {
        string sessionId = getCookie("session");
        if (!sessionId.empty()) {
            destroySession(conn, sessionId);
        }
        clearSessionCookie();
        cout << "Location: ./index.cgi\r\n\r\n";
        mysql_close(conn);
        return 0;
    }
    
    // Handle POST request (login or register)
    if (requestMethod && string(requestMethod) == "POST") {
        // Read POST data from stdin
        const char* contentLength = getenv("CONTENT_LENGTH");
        int length = contentLength ? atoi(contentLength) : 0;
        
        string postData;
        if (length > 0) {
            char* buffer = new char[length + 1];
            cin.read(buffer, length);
            buffer[length] = '\0';
            postData = buffer;
            delete[] buffer;
        }
        
        // Extract form values
        string action = getValue(postData, "action");
        string email = getValue(postData, "email");
        string password = getValue(postData, "password");
        
        // Escape inputs for SQL
        string escapedEmail = escapeSQL(conn, email);
        string escapedPassword = escapeSQL(conn, password);
        
        if (action == "register") {
            // Registration logic
            string query = "INSERT INTO users (email, password) VALUES ('" + 
                          escapedEmail + "', '" + escapedPassword + "')";
            
            if (mysql_query(conn, query.c_str())) {
                // Registration failed - likely duplicate email
                cout << "Location: ./index.cgi?error=email_exists\r\n\r\n";
            } else {
                // Registration successful - redirect to login
                cout << "Location: ./index.cgi?success=registered\r\n\r\n";
            }
        } else if (action == "login") {
            // Login logic - check credentials
            string query = "SELECT user_id FROM users WHERE email = '" + 
                          escapedEmail + "' AND password = '" + escapedPassword + "'";
            
            if (mysql_query(conn, query.c_str())) {
                cout << "Location: ./index.cgi?error=database\r\n\r\n";
            } else {
                MYSQL_RES* result = mysql_store_result(conn);
                MYSQL_ROW row = mysql_fetch_row(result);
                
                if (row) {
                    // Login successful - create session
                    int loggedInUserId = atoi(row[0]);
                    string sessionId = createSession(conn, loggedInUserId);
                    
                    if (!sessionId.empty()) {
                        // Set session cookie FIRST, then redirect
                        // Cookie MUST come before Location header
                        cout << "Set-Cookie: session=" << sessionId << "; HttpOnly\r\n";
                        cout << "Location: ./index.cgi\r\n\r\n";
                    } else {
                        cout << "Location: ./index.cgi?error=session\r\n\r\n";
                    }
                } else {
                    // Login failed - invalid credentials
                    cout << "Location: ./index.cgi?error=invalid\r\n\r\n";
                }
                
                mysql_free_result(result);
            }
        } else {
            // Unknown action
            cout << "Location: ./index.cgi\r\n\r\n";
        }
        
        mysql_close(conn);
        return 0;
    }
    
    // GET request - show login page (only if accessed directly)
    cout << "Content-type: text/html\r\n\r\n";
    cout << "<!DOCTYPE html>\n";
    cout << "<html lang=\"en\">\n";
    cout << "  <head>\n";
    cout << "    <meta charset=\"UTF-8\">\n";
    cout << "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n";
    cout << "    <title>Authentication Handler</title>\n";
    cout << "    <link rel=\"stylesheet\" href=\"style.cgi\">\n";
    cout << "  </head>\n";
    cout << "  <body>\n";
    cout << "    <div class=\"container\">\n";
    cout << "      <h1>Authentication Handler</h1>\n";
    cout << "      <p>This page handles login and registration.</p>\n";
    
    // Show logout button if logged in
    if (sessionState == SESSION_LOGGED_IN) {
        cout << "      <p>You are currently logged in.</p>\n";
        cout << "      <form action=\"login.cgi\" method=\"get\">\n";
        cout << "        <input type=\"hidden\" name=\"action\" value=\"logout\">\n";
        cout << "        <button type=\"submit\" class=\"logout-btn\">Logout</button>\n";
        cout << "      </form>\n";
    }
    
    cout << "      <div class=\"nav\">\n";
    cout << "        <a href=\"index.cgi\">Return to Home</a>\n";
    cout << "      </div>\n";
    cout << "    </div>\n";
    cout << "  </body>\n";
    cout << "</html>\n";
    
    mysql_close(conn);
    return 0;
}